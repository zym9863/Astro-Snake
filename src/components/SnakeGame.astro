---
---

<div class="game-container">
  <div class="game-header">
    <h1>贪吃蛇游戏</h1>
    <div class="score-container">
      <div class="score">
        分数: <span id="current-score">0</span>
      </div>
      <div class="high-score">
        最高分: <span id="high-score">0</span>
      </div>
    </div>
  </div>
  
  <div class="game-area">
    <canvas id="game-canvas" width="400" height="400"></canvas>
    <div class="game-overlay" id="game-overlay">
      <div class="game-message" id="game-message">
        <h2>按空格键开始游戏</h2>
        <p>使用方向键控制蛇的移动</p>
      </div>
    </div>
  </div>
  
  <div class="game-controls">
    <button id="start-btn" class="btn btn-primary">开始</button>
    <button id="pause-btn" class="btn btn-secondary">暂停</button>
    <button id="reset-btn" class="btn btn-secondary">重置</button>
  </div>
  
  <div class="instructions">
    <p>使用方向键 ↑↓←→ 控制蛇的移动，或按空格键开始/暂停游戏</p>
  </div>
</div>

<style>
  .game-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 20px;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background: radial-gradient(circle at 30% 40%, #1e1b4b 0%, #312e81 50%, #1e3a8a 100%);
    min-height: 100vh;
    color: white;
    position: relative;
    overflow: hidden;
  }
  
  .game-container::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: 
      radial-gradient(circle at 20% 80%, rgba(14, 165, 233, 0.15) 0%, transparent 50%),
      radial-gradient(circle at 80% 20%, rgba(139, 92, 246, 0.15) 0%, transparent 50%),
      radial-gradient(circle at 40% 40%, rgba(59, 130, 246, 0.1) 0%, transparent 50%);
    pointer-events: none;
  }
  
  .game-header {
    text-align: center;
    margin-bottom: 30px;
    position: relative;
    z-index: 1;
  }
  
  .game-header h1 {
    margin: 0 0 20px 0;
    font-size: 3em;
    font-weight: 700;
    background: linear-gradient(135deg, #60a5fa, #a78bfa, #34d399);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    text-shadow: 0 0 30px rgba(96, 165, 250, 0.3);
    letter-spacing: 2px;
  }
  
  .score-container {
    display: flex;
    gap: 40px;
    justify-content: center;
    font-size: 1.3em;
    font-weight: 600;
  }
  
  .score, .high-score {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    padding: 12px 20px;
    border-radius: 15px;
    border: 1px solid rgba(255, 255, 255, 0.2);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
  }
  
  .game-area {
    position: relative;
    margin-bottom: 30px;
    border-radius: 20px;
    overflow: hidden;
    box-shadow: 
      0 20px 60px rgba(0, 0, 0, 0.4),
      0 0 0 2px rgba(255, 255, 255, 0.1),
      inset 0 0 0 1px rgba(255, 255, 255, 0.05);
    background: rgba(0, 0, 0, 0.2);
    backdrop-filter: blur(10px);
  }
  
  #game-canvas {
    display: block;
    background: linear-gradient(135deg, #0f172a 0%, #1e293b 50%, #334155 100%);
    border: none;
  }
  
  .game-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.85);
    display: flex;
    align-items: center;
    justify-content: center;
    backdrop-filter: blur(10px);
    border-radius: 20px;
  }
  
  .game-overlay.hidden {
    display: none;
  }
  
  .game-message {
    text-align: center;
    color: white;
    padding: 20px;
    border-radius: 15px;
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(20px);
    border: 1px solid rgba(255, 255, 255, 0.2);
  }
  
  .game-message h2 {
    margin: 0 0 15px 0;
    font-size: 2em;
    font-weight: 600;
    background: linear-gradient(135deg, #60a5fa, #a78bfa);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }
  
  .game-message p {
    margin: 0;
    opacity: 0.9;
    font-size: 1.1em;
  }
  
  .game-controls {
    display: flex;
    gap: 20px;
    margin-bottom: 30px;
    position: relative;
    z-index: 1;
  }
  
  .btn {
    padding: 15px 30px;
    border: none;
    border-radius: 50px;
    font-size: 1.1em;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    box-shadow: 
      0 10px 30px rgba(0, 0, 0, 0.2),
      0 0 0 1px rgba(255, 255, 255, 0.1);
    position: relative;
    overflow: hidden;
    backdrop-filter: blur(10px);
    letter-spacing: 0.5px;
  }
  
  .btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.6s;
  }
  
  .btn:hover::before {
    left: 100%;
  }
  
  .btn:hover {
    transform: translateY(-3px) scale(1.05);
    box-shadow: 
      0 15px 40px rgba(0, 0, 0, 0.3),
      0 0 0 1px rgba(255, 255, 255, 0.2);
  }
  
  .btn:active {
    transform: translateY(-1px) scale(1.02);
  }
  
  .btn-primary {
    background: linear-gradient(135deg, #10b981, #059669, #047857);
    color: white;
  }
  
  .btn-primary:hover {
    background: linear-gradient(135deg, #34d399, #10b981, #059669);
  }
  
  .btn-secondary {
    background: linear-gradient(135deg, #3b82f6, #2563eb, #1d4ed8);
    color: white;
  }
  
  .btn-secondary:hover {
    background: linear-gradient(135deg, #60a5fa, #3b82f6, #2563eb);
  }
  
  .btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
    filter: grayscale(50%);
  }
  
  .btn:disabled:hover {
    transform: none;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
  }
  
  .instructions {
    text-align: center;
    opacity: 0.8;
    font-size: 1em;
    position: relative;
    z-index: 1;
    background: rgba(255, 255, 255, 0.05);
    padding: 15px 25px;
    border-radius: 12px;
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1);
  }
  
  .instructions p {
    margin: 0;
    font-weight: 500;
  }
  
  @media (max-width: 600px) {
    .game-container {
      padding: 15px;
    }
    
    .game-header h1 {
      font-size: 2.2em;
      letter-spacing: 1px;
    }
    
    #game-canvas {
      width: 300px;
      height: 300px;
    }
    
    .score-container {
      flex-direction: column;
      gap: 15px;
      align-items: center;
    }
    
    .score, .high-score {
      padding: 10px 16px;
      font-size: 1.1em;
    }
    
    .game-controls {
      flex-direction: column;
      align-items: center;
      gap: 15px;
    }
    
    .btn {
      width: 160px;
      padding: 12px 25px;
      font-size: 1em;
    }
    
    .instructions {
      font-size: 0.9em;
      padding: 12px 20px;
    }
    
    .game-area {
      margin-bottom: 20px;
    }
  }
</style>

<script>
  class SnakeGame {
    constructor() {
      this.canvas = document.getElementById('game-canvas');
      this.ctx = this.canvas.getContext('2d');
      this.overlay = document.getElementById('game-overlay');
      this.message = document.getElementById('game-message');
      this.currentScoreEl = document.getElementById('current-score');
      this.highScoreEl = document.getElementById('high-score');
      
      this.startBtn = document.getElementById('start-btn');
      this.pauseBtn = document.getElementById('pause-btn');
      this.resetBtn = document.getElementById('reset-btn');
      
      this.gridSize = 20;
      this.tileCount = this.canvas.width / this.gridSize;
      
      this.animationProgress = 0;
      this.lastMoveTime = 0;
      this.moveInterval = 150;
      this.scoreAnimations = [];
      this.particles = [];
      
      this.init();
      this.setupEventListeners();
      this.loadHighScore();
    }
    
    init() {
      this.snake = [
        { x: 10, y: 10 }
      ];
      this.food = this.generateFood();
      this.dx = 0;
      this.dy = 0;
      this.score = 0;
      this.gameRunning = false;
      this.gameOver = false;
      
      this.updateScore();
      this.showOverlay('按空格键开始游戏', '使用方向键控制蛇的移动');
    }
    
    setupEventListeners() {
      document.addEventListener('keydown', (e) => this.handleKeyPress(e));
      
      this.startBtn.addEventListener('click', () => this.startGame());
      this.pauseBtn.addEventListener('click', () => this.togglePause());
      this.resetBtn.addEventListener('click', () => this.resetGame());
    }
    
    handleKeyPress(e) {
      if (e.code === 'Space') {
        e.preventDefault();
        if (this.gameOver) {
          this.resetGame();
        } else {
          this.togglePause();
        }
        return;
      }
      
      if (!this.gameRunning) return;
      
      const direction = {
        'ArrowUp': { x: 0, y: -1 },
        'ArrowDown': { x: 0, y: 1 },
        'ArrowLeft': { x: -1, y: 0 },
        'ArrowRight': { x: 1, y: 0 }
      }[e.code];
      
      if (direction) {
        e.preventDefault();
        if (direction.x !== -this.dx && direction.y !== -this.dy) {
          this.dx = direction.x;
          this.dy = direction.y;
        }
      }
    }
    
    startGame() {
      if (this.gameOver) {
        this.resetGame();
        return;
      }
      
      // 如果还没有设置方向，默认向右移动
      if (this.dx === 0 && this.dy === 0) {
        this.dx = 1;
        this.dy = 0;
      }
      
      this.gameRunning = true;
      this.hideOverlay();
      this.gameLoop();
    }
    
    togglePause() {
      if (this.gameOver) return;
      
      this.gameRunning = !this.gameRunning;
      
      if (this.gameRunning) {
        this.hideOverlay();
        this.gameLoop();
      } else {
        this.showOverlay('游戏暂停', '按空格键继续');
      }
    }
    
    resetGame() {
      this.init();
      this.draw();
    }
    
    gameLoop() {
      if (!this.gameRunning) return;
      
      const currentTime = Date.now();
      const timeSinceLastMove = currentTime - this.lastMoveTime;
      
      if (timeSinceLastMove >= this.moveInterval) {
        this.update();
        this.lastMoveTime = currentTime;
        this.animationProgress = 0;
      } else {
        this.animationProgress = timeSinceLastMove / this.moveInterval;
      }
      
      this.updateAnimations();
      this.draw();
      
      if (this.gameRunning) {
        requestAnimationFrame(() => this.gameLoop());
      }
    }
    
    update() {
      // 如果蛇还没有开始移动，不要更新
      if (this.dx === 0 && this.dy === 0) {
        return;
      }
      
      const head = { x: this.snake[0].x + this.dx, y: this.snake[0].y + this.dy };
      
      if (this.checkCollision(head)) {
        this.endGame();
        return;
      }
      
      this.snake.unshift(head);
      
      if (head.x === this.food.x && head.y === this.food.y) {
        this.score += 10;
        this.updateScore();
        this.createScoreAnimation(head.x, head.y);
        this.createParticles(head.x, head.y);
        this.food = this.generateFood();
      } else {
        this.snake.pop();
      }
    }
    
    checkCollision(head) {
      return (
        head.x < 0 || head.x >= this.tileCount ||
        head.y < 0 || head.y >= this.tileCount ||
        this.snake.some(segment => segment.x === head.x && segment.y === head.y)
      );
    }
    
    generateFood() {
      let food;
      do {
        food = {
          x: Math.floor(Math.random() * this.tileCount),
          y: Math.floor(Math.random() * this.tileCount)
        };
      } while (this.snake.some(segment => segment.x === food.x && segment.y === food.y));
      
      return food;
    }
    
    updateAnimations() {
      this.scoreAnimations = this.scoreAnimations.filter(animation => {
        animation.life -= 0.02;
        animation.y -= 0.5;
        return animation.life > 0;
      });
      
      this.particles = this.particles.filter(particle => {
        particle.life -= 0.02;
        particle.x += particle.vx;
        particle.y += particle.vy;
        particle.vy += 0.1;
        return particle.life > 0;
      });
    }
    
    createScoreAnimation(x, y) {
      this.scoreAnimations.push({
        x: x * this.gridSize + this.gridSize / 2,
        y: y * this.gridSize + this.gridSize / 2,
        life: 1,
        score: 10
      });
    }
    
    createParticles(x, y) {
      const centerX = x * this.gridSize + this.gridSize / 2;
      const centerY = y * this.gridSize + this.gridSize / 2;
      
      for (let i = 0; i < 8; i++) {
        const angle = (i / 8) * Math.PI * 2;
        this.particles.push({
          x: centerX,
          y: centerY,
          vx: Math.cos(angle) * 2,
          vy: Math.sin(angle) * 2,
          life: 1,
          color: `hsl(${Math.random() * 60 + 300}, 70%, 60%)`
        });
      }
    }
    
    draw() {
      this.ctx.fillStyle = '#1a252f';
      this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
      
      this.drawGrid();
      this.drawSnake();
      this.drawFood();
      this.drawScoreAnimations();
      this.drawParticles();
    }
    
    drawGrid() {
      this.ctx.strokeStyle = 'rgba(52, 73, 94, 0.3)';
      this.ctx.lineWidth = 0.5;
      
      for (let i = 0; i <= this.tileCount; i++) {
        this.ctx.beginPath();
        this.ctx.moveTo(i * this.gridSize, 0);
        this.ctx.lineTo(i * this.gridSize, this.canvas.height);
        this.ctx.stroke();
        
        this.ctx.beginPath();
        this.ctx.moveTo(0, i * this.gridSize);
        this.ctx.lineTo(this.canvas.width, i * this.gridSize);
        this.ctx.stroke();
      }
    }
    
    drawSnake() {
      this.snake.forEach((segment, index) => {
        const x = segment.x * this.gridSize;
        const y = segment.y * this.gridSize;
        const size = this.gridSize - 4;
        const radius = 8;
        
        this.ctx.save();
        
        if (index === 0) {
          const gradient = this.ctx.createRadialGradient(
            x + this.gridSize/2, y + this.gridSize/2, 0,
            x + this.gridSize/2, y + this.gridSize/2, this.gridSize/2
          );
          gradient.addColorStop(0, '#4ade80');
          gradient.addColorStop(1, '#16a34a');
          this.ctx.fillStyle = gradient;
          
          this.ctx.shadowColor = 'rgba(74, 222, 128, 0.5)';
          this.ctx.shadowBlur = 10;
        } else {
          const gradient = this.ctx.createLinearGradient(x, y, x + size, y + size);
          gradient.addColorStop(0, '#22c55e');
          gradient.addColorStop(1, '#15803d');
          this.ctx.fillStyle = gradient;
          
          this.ctx.shadowColor = 'rgba(34, 197, 94, 0.3)';
          this.ctx.shadowBlur = 5;
        }
        
        this.ctx.beginPath();
        this.ctx.roundRect(x + 2, y + 2, size, size, radius);
        this.ctx.fill();
        
        if (index === 0) {
          this.drawSnakeEyes(x, y);
        }
        
        this.ctx.restore();
      });
    }
    
    drawSnakeEyes(x, y) {
      const eyeSize = 3;
      const eyeOffset = 6;
      
      this.ctx.fillStyle = '#ffffff';
      this.ctx.shadowBlur = 0;
      
      this.ctx.beginPath();
      this.ctx.arc(x + eyeOffset, y + eyeOffset, eyeSize, 0, 2 * Math.PI);
      this.ctx.fill();
      
      this.ctx.beginPath();
      this.ctx.arc(x + this.gridSize - eyeOffset, y + eyeOffset, eyeSize, 0, 2 * Math.PI);
      this.ctx.fill();
      
      this.ctx.fillStyle = '#000000';
      this.ctx.beginPath();
      this.ctx.arc(x + eyeOffset, y + eyeOffset, 1.5, 0, 2 * Math.PI);
      this.ctx.fill();
      
      this.ctx.beginPath();
      this.ctx.arc(x + this.gridSize - eyeOffset, y + eyeOffset, 1.5, 0, 2 * Math.PI);
      this.ctx.fill();
    }
    
    drawFood() {
      const x = this.food.x * this.gridSize + this.gridSize/2;
      const y = this.food.y * this.gridSize + this.gridSize/2;
      const radius = (this.gridSize - 6) / 2;
      
      this.ctx.save();
      
      const gradient = this.ctx.createRadialGradient(x, y, 0, x, y, radius);
      gradient.addColorStop(0, '#ff6b6b');
      gradient.addColorStop(0.7, '#ee5a52');
      gradient.addColorStop(1, '#dc2626');
      
      this.ctx.fillStyle = gradient;
      this.ctx.shadowColor = 'rgba(239, 68, 68, 0.6)';
      this.ctx.shadowBlur = 15;
      
      const pulseScale = 1 + Math.sin(Date.now() * 0.008) * 0.1;
      
      this.ctx.beginPath();
      this.ctx.arc(x, y, radius * pulseScale, 0, 2 * Math.PI);
      this.ctx.fill();
      
      this.ctx.shadowBlur = 5;
      this.ctx.fillStyle = '#fff';
      this.ctx.beginPath();
      this.ctx.arc(x - 2, y - 2, 2, 0, 2 * Math.PI);
      this.ctx.fill();
      
      this.ctx.restore();
    }
    
    drawScoreAnimations() {
      this.scoreAnimations.forEach(animation => {
        this.ctx.save();
        this.ctx.globalAlpha = animation.life;
        this.ctx.fillStyle = '#4ade80';
        this.ctx.font = 'bold 16px Arial';
        this.ctx.textAlign = 'center';
        this.ctx.fillText(`+${animation.score}`, animation.x, animation.y);
        this.ctx.restore();
      });
    }
    
    drawParticles() {
      this.particles.forEach(particle => {
        this.ctx.save();
        this.ctx.globalAlpha = particle.life;
        this.ctx.fillStyle = particle.color;
        this.ctx.beginPath();
        this.ctx.arc(particle.x, particle.y, 3, 0, 2 * Math.PI);
        this.ctx.fill();
        this.ctx.restore();
      });
    }
    
    endGame() {
      this.gameRunning = false;
      this.gameOver = true;
      this.saveHighScore();
      this.showOverlay('游戏结束!', `得分: ${this.score} 分<br>按空格键重新开始`);
    }
    
    updateScore() {
      this.currentScoreEl.textContent = this.score;
    }
    
    loadHighScore() {
      const highScore = localStorage.getItem('snake-high-score') || 0;
      this.highScoreEl.textContent = highScore;
    }
    
    saveHighScore() {
      const currentHigh = parseInt(localStorage.getItem('snake-high-score') || 0);
      if (this.score > currentHigh) {
        localStorage.setItem('snake-high-score', this.score.toString());
        this.highScoreEl.textContent = this.score;
      }
    }
    
    showOverlay(title, description) {
      this.message.innerHTML = `<h2>${title}</h2><p>${description}</p>`;
      this.overlay.classList.remove('hidden');
    }
    
    hideOverlay() {
      this.overlay.classList.add('hidden');
    }
  }
  
  document.addEventListener('DOMContentLoaded', () => {
    new SnakeGame();
  });
</script>